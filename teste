____________________________________________________________________Cria
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <iostream>

using namespace std;

int ii;
float ff;
double dd;
char cc;
char ss[256];
int bb;
// *uso do pipe 
double x_double;
float x_float;
char x_char;
int x_int;
int main ()
{
 int b;
int c;
int d;
int temp;
double temp1;
int ZETA[6];
char a;
char z;
int Temp_I0;
int Temp_I1;
int Temp_I2;
int Temp_I3;
int Temp_I4;
int Temp_I5;
int Temp_I6;
int Temp_I7;
int Temp_I8;
int Temp_I9;
int Temp_I10;
int Temp_I11;
int Temp_I12;
int Temp_I13;
int Temp_I14;
int Temp_I15;
int Temp_I16;
int Temp_I17;
int Temp_I18;
int Temp_I19;
int Temp_I20;
int Temp_I21;
int Temp_I22;
int Temp_I23;
int Temp_I24;
int Temp_I25;
int Temp_I26;
int Temp_I27;
int Temp_I28;
int Temp_I29;
int Temp_I30;
int Temp_I31;
int Temp_I32;
int Temp_I33;
int Temp_I34;
int Temp_I35;
int Temp_I36;
int Temp_I37;
int Temp_I38;
int Temp_I39;
int Temp_I40;
int Temp_I41;
int Temp_I42;
double Temp_D0;
double Temp_D1;
double Temp_D2;
double Temp_D3;
int Temp_B0;
int Temp_B1;
int Temp_B2;
int Temp_B3;
int Temp_B4;
int Temp_B5;
int Temp_B6;
int Temp_B7;
int Temp_B8;
int Temp_B9;
int Temp_B10;
int Temp_B11;
int Temp_B12;
int Temp_B13;
int Temp_B14;
int Temp_B15;
int Temp_B16;
int Temp_B17;
int Temp_B18;
int Temp_B19;
int Temp_B20;
int Temp_B21;
int Temp_B22;
int Temp_B23;
int Temp_B24;
int Temp_B25;
int Temp_B26;
int Temp_B27;
int Temp_B28;
int Temp_B29;
int Temp_B30;
int Temp_B31;
char Temp_C0;
char Temp_C1;
char Temp_C2;
char Temp_C3;
char Temp_C4;
char Temp_C5;
char Temp_C6;
char Temp_C7;
char Temp_C8;
char Temp_C9;
Temp_I0 = 0;
Temp_I1 = 0;
ZETA[Temp_I0] = Temp_I1;
Temp_I2 = 1;
Temp_I3 = 1;
ZETA[Temp_I2] = Temp_I3;
Temp_I4 = 2;
Temp_I5 = 2;
ZETA[Temp_I4] = Temp_I5;
Temp_I6 = 3;
Temp_I7 = 3;
ZETA[Temp_I6] = Temp_I7;
Temp_I8 = 4;
Temp_I9 = 4;
ZETA[Temp_I8] = Temp_I9;
Temp_I10 = 5;
Temp_I11 = 5;
ZETA[Temp_I10] = Temp_I11;
Temp_I12 = 6;
Temp_I13 = 6;
ZETA[Temp_I12] = Temp_I13;
Temp_I14 = 7;
Temp_I15 = 7;
ZETA[Temp_I14] = Temp_I15;
Temp_I16 = 8;
Temp_I17 = 8;
ZETA[Temp_I16] = Temp_I17;
Temp_I18 = 9;
Temp_I19 = 9;
ZETA[Temp_I18] = Temp_I19;
Temp_I20 = 10;
temp = Temp_I20;
cout << "Dado o vetor ZETA[";
 cout << temp;
 cout << "]\n";
 cout << "mostre os pares, separando-os: \n";
   x_int = 0;
ROT1:
  Temp_B2 = x_int < temp;
  Temp_B3 = !Temp_B2;
  if( Temp_B3 ) goto ROT2;
Temp_I23 = ZETA[x_int];
Temp_I24 = 2;
Temp_I22 = Temp_I23%Temp_I24;
Temp_I25 = Temp_I22;
Temp_I26 = 0;
Temp_B0 = Temp_I25==Temp_I26;
  Temp_B1 = !Temp_B0;
  if( Temp_B1 ) goto ROT0;
cout << " - ";
 ROT0:
  x_int = x_int + 1;
  goto ROT1;
ROT2:
cout << "\nAgora os ímpares, porém coloque um ponto e virgula quando chegar no final: \n";
   x_int = 0;
ROT6:
  Temp_B8 = x_int < temp;
  Temp_B9 = !Temp_B8;
  if( Temp_B9 ) goto ROT7;
Temp_I29 = ZETA[x_int];
Temp_I30 = 2;
Temp_I28 = Temp_I29%Temp_I30;
Temp_I31 = Temp_I28;
Temp_I32 = 0;
Temp_B4 = Temp_I31>Temp_I32;
  Temp_B5 = !Temp_B4;
  if( Temp_B5 ) goto ROT3;
Temp_I34 = 1;
Temp_I33 = temp-Temp_I34;
Temp_B6 = x_int<Temp_I33;
Temp_B7 =  ! Temp_B6 ;
if(Temp_B7)
goto ROT4;
cout << ZETA[x_int];
 cout << ", ";
 goto ROT5;
ROT4: ;
cout << ZETA[x_int];
 cout << ";";
 ROT5: ;
ROT3:
  x_int = x_int + 1;
  goto ROT6;
ROT7:
Temp_I35 = 1;
b = Temp_I35;
Temp_I36 = 100;
c = Temp_I36;
Temp_I37 = 10;
d = Temp_I37;
cout << "\n\nDentro do intervalo de ";
 cout << b;
 cout << " ate ";
 cout << c;
 cout << "\n";
 cout << "mostre os primeiros";
 cout << d;
 cout << ", porém multiplique-os por 10.0001 antes de imprimir\n";
   x_int = b;
ROT9:
  Temp_B11 = x_int <= c;
  Temp_B12 = !Temp_B11;
  if( Temp_B12 ) goto ROT10;
  Temp_B10 = ! (x_int <= d);
  if( Temp_B10 ) goto ROT8;
Temp_D1 = 10.0001;
Temp_D0 = x_int*Temp_D1;
temp1 = Temp_D0;
cout << temp1;
 cout << "\n";
 ROT8:
  x_int = x_int + 1;
  goto ROT9;
ROT10:
cout << "mostre os ultimos ";
 cout << d;
 cout << ", porém multiplique-os por 10.0001 antes de imprimir\n";
   x_int = b;
ROT12:
  Temp_B14 = x_int <= c;
  Temp_B15 = !Temp_B14;
  if( Temp_B15 ) goto ROT13;
  Temp_B13 = ! (x_int > (c-d));
  if( Temp_B13 ) goto ROT11;
Temp_D3 = 10.0001;
Temp_D2 = x_int*Temp_D3;
temp1 = Temp_D2;
cout << temp1;
 cout << "\n";
 ROT11:
  x_int = x_int + 1;
  goto ROT12;
ROT13:
Temp_C0 = 'A';
a = Temp_C0;
Temp_C1 = 'z';
z = Temp_C1;
cout << "\nQuais caracteres temos entre A-z ? \n";
   x_char = a;
ROT15:
  Temp_B16 = x_char <= z;
  Temp_B17 = !Temp_B16;
  if( Temp_B17 ) goto ROT16;
cout << x_char;
 ROT14:
  x_char = x_char + 1;
  goto ROT15;
ROT16:
cout << "\n\nQuantos nao sao letras ? \n";
   x_char = a;
ROT18:
  Temp_B22 = x_char <= z;
  Temp_B23 = !Temp_B22;
  if( Temp_B23 ) goto ROT19;
Temp_C2 = 'Z';
Temp_B18 = x_char>Temp_C2;
  Temp_B19 = !Temp_B18;
  if( Temp_B19 ) goto ROT17;
Temp_C3 = 'a';
Temp_B20 = x_char<Temp_C3;
  Temp_B21 = !Temp_B20;
  if( Temp_B21 ) goto ROT17;
cout << x_char;
 ROT17:
  x_char = x_char + 1;
  goto ROT18;
ROT19:
cout << "\n\nAgora mostre somente as letras maiusculas:\n";
   x_char = a;
ROT21:
  Temp_B26 = x_char <= z;
  Temp_B27 = !Temp_B26;
  if( Temp_B27 ) goto ROT22;
Temp_C4 = 'Z';
Temp_B24 = x_char<=Temp_C4;
  Temp_B25 = !Temp_B24;
  if( Temp_B25 ) goto ROT20;
cout << x_char;
 ROT20:
  x_char = x_char + 1;
  goto ROT21;
ROT22:
cout << "\n\nAgora mostre somente as letras minusculas:\n";
   x_char = a;
ROT24:
  Temp_B30 = x_char <= z;
  Temp_B31 = !Temp_B30;
  if( Temp_B31 ) goto ROT25;
Temp_C5 = 'a';
Temp_C6 = 'Z';
Temp_I38 = Temp_C5-Temp_C6;
Temp_I39 = 'Z';
Temp_I40 = Temp_I38;
Temp_C7 = Temp_I39+Temp_I40;
Temp_I41 = Temp_C7;
Temp_I42 = 1;
Temp_C8 = Temp_I41-Temp_I42;
Temp_C9 = Temp_C8;
Temp_B28 = x_char>Temp_C9;
  Temp_B29 = !Temp_B28;
  if( Temp_B29 ) goto ROT23;
cout << x_char;
 ROT23:
  x_char = x_char + 1;
  goto ROT24;
ROT25:
cout << "\n";
 
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <iostream>

using namespace std;

int ii;
float ff;
double dd;
char cc;
char ss[256];
int bb;
// *uso do pipe 
double x_double;
float x_float;
char x_char;
int x_int;
int main ()
{
 int b;
int c;
int d;
int temp;
double temp1;
int ZETA[6];
char a;
char z;
int Temp_I0;
int Temp_I1;
int Temp_I2;
int Temp_I3;
int Temp_I4;
int Temp_I5;
int Temp_I6;
int Temp_I7;
int Temp_I8;
int Temp_I9;
int Temp_I10;
int Temp_I11;
int Temp_I12;
int Temp_I13;
int Temp_I14;
int Temp_I15;
int Temp_I16;
int Temp_I17;
int Temp_I18;
int Temp_I19;
int Temp_I20;
int Temp_I21;
int Temp_I22;
int Temp_I23;
int Temp_I24;
int Temp_I25;
int Temp_I26;
int Temp_I27;
int Temp_I28;
int Temp_I29;
int Temp_I30;
int Temp_I31;
int Temp_I32;
int Temp_I33;
int Temp_I34;
int Temp_B0;
int Temp_B1;
int Temp_B2;
int Temp_B3;
int Temp_B4;
int Temp_B5;
int Temp_B6;
int Temp_B7;
int Temp_B8;
int Temp_B9;
Temp_I0 = 0;
Temp_I1 = 0;
ZETA[Temp_I0] = Temp_I1;
Temp_I2 = 1;
Temp_I3 = 1;
ZETA[Temp_I2] = Temp_I3;
Temp_I4 = 2;
Temp_I5 = 2;
ZETA[Temp_I4] = Temp_I5;
Temp_I6 = 3;
Temp_I7 = 3;
ZETA[Temp_I6] = Temp_I7;
Temp_I8 = 4;
Temp_I9 = 4;
ZETA[Temp_I8] = Temp_I9;
Temp_I10 = 5;
Temp_I11 = 5;
ZETA[Temp_I10] = Temp_I11;
Temp_I12 = 6;
Temp_I13 = 6;
ZETA[Temp_I12] = Temp_I13;
Temp_I14 = 7;
Temp_I15 = 7;
ZETA[Temp_I14] = Temp_I15;
Temp_I16 = 8;
Temp_I17 = 8;
ZETA[Temp_I16] = Temp_I17;
Temp_I18 = 9;
Temp_I19 = 9;
ZETA[Temp_I18] = Temp_I19;
Temp_I20 = 10;
temp = Temp_I20;
cout << "Dado o vetor ZETA[";
 cout << temp;
 cout << "]\n";
 cout << "mostre os pares, separando-os: \n";
   x_int = 0;
ROT1:
  Temp_B2 = x_int < temp;
  Temp_B3 = !Temp_B2;
  if( Temp_B3 ) goto ROT2;
Temp_I23 = ZETA[x_int];
Temp_I24 = 2;
Temp_I22 = Temp_I23%Temp_I24;
Temp_I25 = Temp_I22;
Temp_I26 = 0;
Temp_B0 = Temp_I25==Temp_I26;
  Temp_B1 = !Temp_B0;
  if( Temp_B1 ) goto ROT0;
cout << ZETA[x_int];
 cout << " - ";
 ROT0:
  x_int = x_int + 1;
  goto ROT1;
ROT2:
cout << "\nAgora os ímpares, porém coloque um ponto e virgula quando chegar no final: \n";
   x_int = 0;
ROT6:
  Temp_B8 = x_int < temp;
  Temp_B9 = !Temp_B8;
  if( Temp_B9 ) goto ROT7;
Temp_I29 = ZETA[x_int];
Temp_I30 = 2;
Temp_I28 = Temp_I29%Temp_I30;
Temp_I31 = Temp_I28;
Temp_I32 = 0;
Temp_B4 = Temp_I31>Temp_I32;
  Temp_B5 = !Temp_B4;
  if( Temp_B5 ) goto ROT3;
Temp_I34 = 1;
Temp_I33 = temp-Temp_I34;
Temp_B6 = x_int<Temp_I33;
Temp_B7 =  ! Temp_B6 ;
if(Temp_B7)
goto ROT4;
cout << ZETA[x_int];
 cout << ", ";
 goto ROT5;
ROT4: ;
cout << ZETA[x_int];
 cout << ";";
 ROT5: ;
ROT3:
  x_int = x_int + 1;
  goto ROT6;
ROT7:
cout << "\n";
 
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <iostream>

using namespace std;

int ii;
float ff;
double dd;
char cc;
char ss[256];
int bb;
// *uso do pipe 
double x_double;
float x_float;
char x_char;
int x_int;
int main ()
{
 int b;
int c;
int d;
int temp;
double temp1;
int ZETA[6];
char a;
char z;
int Temp_I0;
int Temp_I1;
int Temp_I2;
double Temp_D0;
double Temp_D1;
int Temp_B0;
int Temp_B1;
int Temp_B2;
int Temp_B3;
int Temp_B4;
int Temp_B5;
Temp_I0 = 1;
b = Temp_I0;
Temp_I1 = 100;
c = Temp_I1;
Temp_I2 = 10;
d = Temp_I2;
cout << "\n\nDentro do intervalo de ";
 cout << b;
 cout << " ate ";
 cout << c;
 cout << "\n";
 cout << "mostre os primeiros";
 cout << d;
 cout << ", porém multiplique-os por 10.0001 antes de imprimir\n";
   x_int = b;
ROT1:
  Temp_B1 = x_int <= c;
  Temp_B2 = !Temp_B1;
  if( Temp_B2 ) goto ROT2;
  Temp_B0 = ! (x_int <= d);
  if( Temp_B0 ) goto ROT0;
Temp_D1 = 10.0001;
Temp_D0 = x_int*Temp_D1;
temp1 = Temp_D0;
cout << temp1;
 cout << "\n";
 ROT0:
  x_int = x_int + 1;
  goto ROT1;
ROT2:
cout << "mostre os ultimos ";
 cout << d;
 cout << ", porém multiplique-os por 10.0001 antes de imprimir\n";
   x_int = b;
ROT4:
  Temp_B4 = x_int <= c;
  Temp_B5 = !Temp_B4;
  if( Temp_B5 ) goto ROT5;
  Temp_B3 = ! (x_int > (c-d));
  if( Temp_B3 ) goto ROT3;
cout << x_int;
 cout << "\n";
 ROT3:
  x_int = x_int + 1;
  goto ROT4;
ROT5:
cout << "\n";
 
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <iostream>

using namespace std;


// *uso do pipe 
double x_double;
float x_float;
char x_char;
int x_int;
int main ()
{
 int i;
int j;
int k;
int soma;
int matrix1[12];
int matrix2[40];
int matrix_result[30];
int Temp_I0;
int Temp_I1;
int Temp_I2;
int Temp_I3;
int Temp_I4;
int Temp_I5;
int Temp_I6;
int Temp_I7;
int Temp_I8;
int Temp_I9;
int Temp_I10;
int Temp_I11;
int Temp_I12;
int Temp_I13;
int Temp_I14;
int Temp_I15;
int Temp_I16;
int Temp_I17;
int Temp_I18;
int Temp_I19;
int Temp_I20;
int Temp_I21;
int Temp_I22;
int Temp_I23;
int Temp_I24;
int Temp_I25;
int Temp_I26;
int Temp_I27;
int Temp_I28;
int Temp_I29;
int Temp_I30;
int Temp_I31;
int Temp_I32;
int Temp_I33;
int Temp_I34;
int Temp_I35;
int Temp_I36;
int Temp_I37;
int Temp_I38;
int Temp_I39;
int Temp_I40;
int Temp_I41;
int Temp_I42;
int Temp_I43;
int Temp_I44;
int Temp_I45;
int Temp_I46;
int Temp_I47;
int Temp_I48;
int Temp_I49;
int Temp_I50;
int Temp_I51;
int Temp_I52;
int Temp_I53;
int Temp_I54;
int Temp_I55;
int Temp_I56;
int Temp_I57;
int Temp_I58;
int Temp_I59;
int Temp_I60;
int Temp_I61;
int Temp_I62;
int Temp_I63;
int Temp_I64;
int Temp_I65;
int Temp_I66;
int Temp_I67;
int Temp_I68;
int Temp_I69;
int Temp_I70;
int Temp_I71;
int Temp_I72;
int Temp_I73;
int Temp_I74;
int Temp_I75;
int Temp_I76;
int Temp_I77;
int Temp_I78;
int Temp_I79;
int Temp_I80;
int Temp_I81;
int Temp_I82;
int Temp_I83;
int Temp_B0;
int Temp_B1;
int Temp_B2;
int Temp_B3;
int Temp_B4;
int Temp_B5;
int Temp_B6;
int Temp_B7;
int Temp_B8;
int Temp_B9;
int Temp_B10;
int Temp_B11;
int Temp_B12;
int Temp_B13;
int Temp_B14;
int Temp_B15;
int Temp_B16;
int Temp_B17;
int Temp_B18;
int Temp_B19;
int Temp_B20;
int Temp_B21;
int Temp_B22;
int Temp_B23;
int Temp_B24;
int Temp_B25;
Temp_I0 = 0;
i = Temp_I0;
	ROT3:
Temp_I1 = 3;
Temp_B0 = i<Temp_I1;
	Temp_B3 = !Temp_B0;
	if( Temp_B3 ) goto ROT2;
Temp_I2 = 0;
j = Temp_I2;
	ROT1:
Temp_I3 = 4;
Temp_B1 = j<Temp_I3;
	Temp_B2 = !Temp_B1;
	if( Temp_B2 ) goto ROT0;
Temp_I4 = i;
Temp_I4 = Temp_I4 * 4;
Temp_I5 = Temp_I4+j;
Temp_I7 = j*i;
matrix1[Temp_I5] = Temp_I7;
Temp_I9 = 1;
Temp_I8 = j+Temp_I9;
j = Temp_I8;
	goto ROT1;
	ROT0:
 ;Temp_I11 = 1;
Temp_I10 = i+Temp_I11;
i = Temp_I10;
	goto ROT3;
	ROT2:
 ;Temp_I12 = 0;
i = Temp_I12;
	ROT7:
Temp_I13 = 4;
Temp_B4 = i<Temp_I13;
	Temp_B7 = !Temp_B4;
	if( Temp_B7 ) goto ROT6;
Temp_I14 = 0;
j = Temp_I14;
	ROT5:
Temp_I15 = 10;
Temp_B5 = j<Temp_I15;
	Temp_B6 = !Temp_B5;
	if( Temp_B6 ) goto ROT4;
Temp_I16 = i;
Temp_I16 = Temp_I16 * 10;
Temp_I17 = Temp_I16+j;
Temp_I19 = i+j;
matrix2[Temp_I17] = Temp_I19;
Temp_I21 = 1;
Temp_I20 = j+Temp_I21;
j = Temp_I20;
	goto ROT5;
	ROT4:
 ;Temp_I23 = 1;
Temp_I22 = i+Temp_I23;
i = Temp_I22;
	goto ROT7;
	ROT6:
 ;cout << "Matriz 1: ";
 cout << "\n";
 Temp_I24 = 0;
i = Temp_I24;
	ROT11:
Temp_I25 = 3;
Temp_B8 = i<Temp_I25;
	Temp_B11 = !Temp_B8;
	if( Temp_B11 ) goto ROT10;
Temp_I26 = 0;
j = Temp_I26;
	ROT9:
Temp_I27 = 4;
Temp_B9 = j<Temp_I27;
	Temp_B10 = !Temp_B9;
	if( Temp_B10 ) goto ROT8;
Temp_I28 = i;
Temp_I28 = Temp_I28 * 4;
Temp_I29 = Temp_I28+j;
cout << matrix1[Temp_I29];
 cout << " ";
 Temp_I32 = 1;
Temp_I31 = j+Temp_I32;
j = Temp_I31;
	goto ROT9;
	ROT8:
 ;cout << "\n";
 Temp_I34 = 1;
Temp_I33 = i+Temp_I34;
i = Temp_I33;
	goto ROT11;
	ROT10:
 ;cout << "\n";
 cout << "Matriz 2: ";
 cout << "\n";
 Temp_I35 = 0;
i = Temp_I35;
	ROT15:
Temp_I36 = 4;
Temp_B12 = i<Temp_I36;
	Temp_B15 = !Temp_B12;
	if( Temp_B15 ) goto ROT14;
Temp_I37 = 0;
j = Temp_I37;
	ROT13:
Temp_I38 = 10;
Temp_B13 = j<Temp_I38;
	Temp_B14 = !Temp_B13;
	if( Temp_B14 ) goto ROT12;
Temp_I39 = i;
Temp_I39 = Temp_I39 * 10;
Temp_I40 = Temp_I39+j;
cout << matrix2[Temp_I40];
 cout << " ";
 Temp_I43 = 1;
Temp_I42 = j+Temp_I43;
j = Temp_I42;
	goto ROT13;
	ROT12:
 ;cout << "\n";
 Temp_I45 = 1;
Temp_I44 = i+Temp_I45;
i = Temp_I44;
	goto ROT15;
	ROT14:
 ;Temp_I46 = 0;
i = Temp_I46;
	ROT21:
Temp_I47 = 3;
Temp_B16 = i<Temp_I47;
	Temp_B21 = !Temp_B16;
	if( Temp_B21 ) goto ROT20;
Temp_I48 = 0;
j = Temp_I48;
	ROT19:
Temp_I49 = 10;
Temp_B17 = j<Temp_I49;
	Temp_B20 = !Temp_B17;
	if( Temp_B20 ) goto ROT18;
Temp_I50 = 0;
soma = Temp_I50;
Temp_I51 = 0;
k = Temp_I51;
	ROT17:
Temp_I52 = 4;
Temp_B18 = k<Temp_I52;
	Temp_B19 = !Temp_B18;
	if( Temp_B19 ) goto ROT16;
Temp_I53 = i;
Temp_I53 = Temp_I53 * 4;
Temp_I54 = Temp_I53+k;
Temp_I56 = k;
Temp_I56 = Temp_I56 * 10;
Temp_I57 = Temp_I56+j;
Temp_I60 = matrix1[Temp_I54];
Temp_I61 = matrix2[Temp_I57];
Temp_I59 = Temp_I60*Temp_I61;
Temp_I63 = Temp_I59;
Temp_I62 = soma+Temp_I63;
soma = Temp_I62;
Temp_I64 = i;
Temp_I64 = Temp_I64 * 10;
Temp_I65 = Temp_I64+j;
matrix_result[Temp_I65] = soma;
Temp_I68 = 1;
Temp_I67 = k+Temp_I68;
k = Temp_I67;
	goto ROT17;
	ROT16:
 ;Temp_I70 = 1;
Temp_I69 = j+Temp_I70;
j = Temp_I69;
	goto ROT19;
	ROT18:
 ;Temp_I72 = 1;
Temp_I71 = i+Temp_I72;
i = Temp_I71;
	goto ROT21;
	ROT20:
 ;cout << "\nProduto das Matrizes 1 e 2: ";
 cout << "\n";
 Temp_I73 = 0;
i = Temp_I73;
	ROT25:
Temp_I74 = 3;
Temp_B22 = i<Temp_I74;
	Temp_B25 = !Temp_B22;
	if( Temp_B25 ) goto ROT24;
Temp_I75 = 0;
j = Temp_I75;
	ROT23:
Temp_I76 = 10;
Temp_B23 = j<Temp_I76;
	Temp_B24 = !Temp_B23;
	if( Temp_B24 ) goto ROT22;
Temp_I77 = i;
Temp_I77 = Temp_I77 * 10;
Temp_I78 = Temp_I77+j;
cout << matrix_result[Temp_I78];
 cout << " ";
 Temp_I81 = 1;
Temp_I80 = j+Temp_I81;
j = Temp_I80;
	goto ROT23;
	ROT22:
 ;cout << "\n";
 Temp_I83 = 1;
Temp_I82 = i+Temp_I83;
i = Temp_I82;
	goto ROT25;
	ROT24:
 ;cout << "\n";
 
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <iostream>

using namespace std;

void recursive_MDC(int n1,int n2,int &RI);

// *uso do pipe 
double x_double;
float x_float;
char x_char;
int x_int;
int main ()
{
 int a;
int b;
int mdc;
int Temp_I0;
int Temp_I1;
cout << "Entre com dois numeros para calcular o MDC: ";
 cout << "\n";
 cin >> a ;
cin >> b ;
recursive_MDC(a, b, Temp_I0);
Temp_I1 = Temp_I0;
mdc = Temp_I1;
cout << "O MDC entre ";
 cout << a;
 cout << " e ";
 cout << b;
 cout << " e igual a: ";
 cout << mdc;
 cout << "\n";
 cout << "\n";
 
}
void recursive_MDC(int n1,int n2,int &RI)
{
 int x_int;
float x_float;
double x_double;
char x_char;
int Temp_I0;
int Temp_I1;
int Temp_I2;
int Temp_I3;
int Temp_I4;
int Temp_I5;
int Temp_B0;
int Temp_B1;
Temp_I0 = n2;
Temp_I1 = 0;
Temp_B0 = Temp_I0==Temp_I1;
Temp_B1 =  ! Temp_B0 ;
if(Temp_B1)
goto ROT0;
RI = n1;
return;
ROT0: ;
Temp_I3 = n1;
Temp_I4 = n2;
Temp_I2 = Temp_I3%Temp_I4;
recursive_MDC(n2, Temp_I2, Temp_I5);
RI = Temp_I5;
return;

}

____________________________________________________________________compila
cat saida.c -n
     1	#include <stdio.h>
     2	#include <stdlib.h>
     3	#include <string.h>
     4	#include <string>
     5	#include <iostream>
     6	
     7	using namespace std;
     8	
     9	int ii;
    10	float ff;
    11	double dd;
    12	char cc;
    13	char ss[256];
    14	int bb;
    15	int main ()
    16	{
    17	 // *uso do pipe 
    18	double x_double;
    19	float x_float;
    20	char x_char;
    21	int x_int;
    22	int b;
    23	int c;
    24	int d;
    25	int temp;
    26	double temp1;
    27	int ZETA[6];
    28	char a;
    29	char z;
    30	int Temp_I0;
    31	int Temp_I1;
    32	int Temp_I2;
    33	int Temp_I3;
    34	int Temp_I4;
    35	int Temp_I5;
    36	int Temp_I6;
    37	int Temp_I7;
    38	int Temp_I8;
    39	int Temp_I9;
    40	int Temp_I10;
    41	int Temp_I11;
    42	int Temp_I12;
    43	int Temp_I13;
    44	int Temp_I14;
    45	int Temp_I15;
    46	int Temp_I16;
    47	int Temp_I17;
    48	int Temp_I18;
    49	int Temp_I19;
    50	int Temp_I20;
    51	int Temp_I21;
    52	int Temp_I22;
    53	int Temp_I23;
    54	int Temp_I24;
    55	int Temp_I25;
    56	int Temp_I26;
    57	int Temp_I27;
    58	int Temp_I28;
    59	int Temp_I29;
    60	int Temp_I30;
    61	int Temp_I31;
    62	int Temp_I32;
    63	int Temp_I33;
    64	int Temp_I34;
    65	int Temp_I35;
    66	int Temp_I36;
    67	int Temp_I37;
    68	int Temp_I38;
    69	int Temp_I39;
    70	int Temp_I40;
    71	int Temp_I41;
    72	int Temp_I42;
    73	double Temp_D0;
    74	double Temp_D1;
    75	double Temp_D2;
    76	double Temp_D3;
    77	int Temp_B0;
    78	int Temp_B1;
    79	int Temp_B2;
    80	int Temp_B3;
    81	int Temp_B4;
    82	int Temp_B5;
    83	int Temp_B6;
    84	int Temp_B7;
    85	int Temp_B8;
    86	int Temp_B9;
    87	int Temp_B10;
    88	int Temp_B11;
    89	int Temp_B12;
    90	int Temp_B13;
    91	int Temp_B14;
    92	int Temp_B15;
    93	int Temp_B16;
    94	int Temp_B17;
    95	int Temp_B18;
    96	int Temp_B19;
    97	int Temp_B20;
    98	int Temp_B21;
    99	int Temp_B22;
   100	int Temp_B23;
   101	int Temp_B24;
   102	int Temp_B25;
   103	int Temp_B26;
   104	int Temp_B27;
   105	int Temp_B28;
   106	int Temp_B29;
   107	int Temp_B30;
   108	int Temp_B31;
   109	char Temp_C0;
   110	char Temp_C1;
   111	char Temp_C2;
   112	char Temp_C3;
   113	char Temp_C4;
   114	char Temp_C5;
   115	char Temp_C6;
   116	char Temp_C7;
   117	char Temp_C8;
   118	char Temp_C9;
   119	Temp_I0 = 0;
   120	Temp_I1 = 0;
   121	ZETA[Temp_I0] = Temp_I1;
   122	Temp_I2 = 1;
   123	Temp_I3 = 1;
   124	ZETA[Temp_I2] = Temp_I3;
   125	Temp_I4 = 2;
   126	Temp_I5 = 2;
   127	ZETA[Temp_I4] = Temp_I5;
   128	Temp_I6 = 3;
   129	Temp_I7 = 3;
   130	ZETA[Temp_I6] = Temp_I7;
   131	Temp_I8 = 4;
   132	Temp_I9 = 4;
   133	ZETA[Temp_I8] = Temp_I9;
   134	Temp_I10 = 5;
   135	Temp_I11 = 5;
   136	ZETA[Temp_I10] = Temp_I11;
   137	Temp_I12 = 6;
   138	Temp_I13 = 6;
   139	ZETA[Temp_I12] = Temp_I13;
   140	Temp_I14 = 7;
   141	Temp_I15 = 7;
   142	ZETA[Temp_I14] = Temp_I15;
   143	Temp_I16 = 8;
   144	Temp_I17 = 8;
   145	ZETA[Temp_I16] = Temp_I17;
   146	Temp_I18 = 9;
   147	Temp_I19 = 9;
   148	ZETA[Temp_I18] = Temp_I19;
   149	Temp_I20 = 10;
   150	temp = Temp_I20;
   151	cout << "Dado o vetor ZETA[";
   152	 cout << temp;
   153	 cout << "]\n";
   154	 cout << "mostre os pares, separando-os: \n";
   155	   x_int = 0;
   156	ROT1:
   157	  Temp_B2 = x_int < temp;
   158	  Temp_B3 = !Temp_B2;
   159	  if( Temp_B3 ) goto ROT2;
   160	Temp_I23 = ZETA[x_int];
   161	Temp_I24 = 2;
   162	Temp_I22 = Temp_I23%Temp_I24;
   163	Temp_I25 = Temp_I22;
   164	Temp_I26 = 0;
   165	Temp_B0 = Temp_I25==Temp_I26;
   166	  Temp_B1 = !Temp_B0;
   167	  if( Temp_B1 ) goto ROT0;
   168	cout << " - ";
   169	 ROT0:
   170	  x_int = x_int + 1;
   171	  goto ROT1;
   172	ROT2:
   173	cout << "\nAgora os ímpares, porém coloque um ponto e virgula quando chegar no final: \n";
   174	   x_int = 0;
   175	ROT6:
   176	  Temp_B8 = x_int < temp;
   177	  Temp_B9 = !Temp_B8;
   178	  if( Temp_B9 ) goto ROT7;
   179	Temp_I29 = ZETA[x_int];
   180	Temp_I30 = 2;
   181	Temp_I28 = Temp_I29%Temp_I30;
   182	Temp_I31 = Temp_I28;
   183	Temp_I32 = 0;
   184	Temp_B4 = Temp_I31>Temp_I32;
   185	  Temp_B5 = !Temp_B4;
   186	  if( Temp_B5 ) goto ROT3;
   187	Temp_I34 = 1;
   188	Temp_I33 = temp-Temp_I34;
   189	Temp_B6 = x_int<Temp_I33;
   190	Temp_B7 =  ! Temp_B6 ;
   191	if(Temp_B7)
   192	goto ROT4;
   193	cout << ZETA[x_int];
   194	 cout << ", ";
   195	 goto ROT5;
   196	ROT4: ;
   197	cout << ZETA[x_int];
   198	 cout << ";";
   199	 ROT5: ;
   200	ROT3:
   201	  x_int = x_int + 1;
   202	  goto ROT6;
   203	ROT7:
   204	Temp_I35 = 1;
   205	b = Temp_I35;
   206	Temp_I36 = 100;
   207	c = Temp_I36;
   208	Temp_I37 = 10;
   209	d = Temp_I37;
   210	cout << "\n\nDentro do intervalo de ";
   211	 cout << b;
   212	 cout << " ate ";
   213	 cout << c;
   214	 cout << "\n";
   215	 cout << "mostre os primeiros";
   216	 cout << d;
   217	 cout << ", porém multiplique-os por 10.0001 antes de imprimir\n";
   218	   x_int = b;
   219	ROT9:
   220	  Temp_B11 = x_int <= c;
   221	  Temp_B12 = !Temp_B11;
   222	  if( Temp_B12 ) goto ROT10;
   223	  Temp_B10 = ! (x_int <= d);
   224	  if( Temp_B10 ) goto ROT8;
   225	Temp_D1 = 10.0001;
   226	Temp_D0 = x_int*Temp_D1;
   227	temp1 = Temp_D0;
   228	cout << temp1;
   229	 cout << "\n";
   230	 ROT8:
   231	  x_int = x_int + 1;
   232	  goto ROT9;
   233	ROT10:
   234	cout << "mostre os ultimos ";
   235	 cout << d;
   236	 cout << ", porém multiplique-os por 10.0001 antes de imprimir\n";
   237	   x_int = b;
   238	ROT12:
   239	  Temp_B14 = x_int <= c;
   240	  Temp_B15 = !Temp_B14;
   241	  if( Temp_B15 ) goto ROT13;
   242	  Temp_B13 = ! (x_int > (c-d));
   243	  if( Temp_B13 ) goto ROT11;
   244	Temp_D3 = 10.0001;
   245	Temp_D2 = x_int*Temp_D3;
   246	temp1 = Temp_D2;
   247	cout << temp1;
   248	 cout << "\n";
   249	 ROT11:
   250	  x_int = x_int + 1;
   251	  goto ROT12;
   252	ROT13:
   253	Temp_C0 = 'A';
   254	a = Temp_C0;
   255	Temp_C1 = 'z';
   256	z = Temp_C1;
   257	cout << "\nQuais caracteres temos entre A-z ? \n";
   258	   x_char = a;
   259	ROT15:
   260	  Temp_B16 = x_char <= z;
   261	  Temp_B17 = !Temp_B16;
   262	  if( Temp_B17 ) goto ROT16;
   263	cout << x_char;
   264	 ROT14:
   265	  x_char = x_char + 1;
   266	  goto ROT15;
   267	ROT16:
   268	cout << "\n\nQuantos nao sao letras ? \n";
   269	   x_char = a;
   270	ROT18:
   271	  Temp_B22 = x_char <= z;
   272	  Temp_B23 = !Temp_B22;
   273	  if( Temp_B23 ) goto ROT19;
   274	Temp_C2 = 'Z';
   275	Temp_B18 = x_char>Temp_C2;
   276	  Temp_B19 = !Temp_B18;
   277	  if( Temp_B19 ) goto ROT17;
   278	Temp_C3 = 'a';
   279	Temp_B20 = x_char<Temp_C3;
   280	  Temp_B21 = !Temp_B20;
   281	  if( Temp_B21 ) goto ROT17;
   282	cout << x_char;
   283	 ROT17:
   284	  x_char = x_char + 1;
   285	  goto ROT18;
   286	ROT19:
   287	cout << "\n\nAgora mostre somente as letras maiusculas:\n";
   288	   x_char = a;
   289	ROT21:
   290	  Temp_B26 = x_char <= z;
   291	  Temp_B27 = !Temp_B26;
   292	  if( Temp_B27 ) goto ROT22;
   293	Temp_C4 = 'Z';
   294	Temp_B24 = x_char<=Temp_C4;
   295	  Temp_B25 = !Temp_B24;
   296	  if( Temp_B25 ) goto ROT20;
   297	cout << x_char;
   298	 ROT20:
   299	  x_char = x_char + 1;
   300	  goto ROT21;
   301	ROT22:
   302	cout << "\n\nAgora mostre somente as letras minusculas:\n";
   303	   x_char = a;
   304	ROT24:
   305	  Temp_B30 = x_char <= z;
   306	  Temp_B31 = !Temp_B30;
   307	  if( Temp_B31 ) goto ROT25;
   308	Temp_C5 = 'a';
   309	Temp_C6 = 'Z';
   310	Temp_I38 = Temp_C5-Temp_C6;
   311	Temp_I39 = 'Z';
   312	Temp_I40 = Temp_I38;
   313	Temp_C7 = Temp_I39+Temp_I40;
   314	Temp_I41 = Temp_C7;
   315	Temp_I42 = 1;
   316	Temp_C8 = Temp_I41-Temp_I42;
   317	Temp_C9 = Temp_C8;
   318	Temp_B28 = x_char>Temp_C9;
   319	  Temp_B29 = !Temp_B28;
   320	  if( Temp_B29 ) goto ROT23;
   321	cout << x_char;
   322	 ROT23:
   323	  x_char = x_char + 1;
   324	  goto ROT24;
   325	ROT25:
   326	cout << "\n";
   327	 
   328	}
   329	
------------
g++ files/5.c -o PROG5
g++ files/4.c -o PROG4
g++ files/3.c -o PROG3
g++ files/2.c -o PROG2
g++ files/1.c -o PROG1
____________________________________________________________________Executa
Entre com dois numeros para calcular o MDC: 
O MDC entre 99 e 77 e igual a: 11

Matriz 1: 
0 0 0 0 
0 1 2 3 
0 2 4 6 

Matriz 2: 
0 1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 10 
2 3 4 5 6 7 8 9 10 11 
3 4 5 6 7 8 9 10 11 12 

Produto das Matrizes 1 e 2: 
0 0 0 0 0 0 0 0 0 0 
14 20 26 32 38 44 50 56 62 68 
28 40 52 64 76 88 100 112 124 136 



Dentro do intervalo de 1 ate 100
mostre os primeiros10, porém multiplique-os por 10.0001 antes de imprimir
10.0001
20.0002
30.0003
40.0004
50.0005
60.0006
70.0007
80.0008
90.0009
100.001
mostre os ultimos 10, porém multiplique-os por 10.0001 antes de imprimir
91
92
93
94
95
96
97
98
99
100

Dado o vetor ZETA[10]
mostre os pares, separando-os: 
0 - 2 - 4 - 6 - 8 - 
Agora os ímpares, porém coloque um ponto e virgula quando chegar no final: 
1, 3, 5, 7, 9;
Dado o vetor ZETA[10]
mostre os pares, separando-os: 
 -  -  -  -  - 
Agora os ímpares, porém coloque um ponto e virgula quando chegar no final: 
1, 3, 5, 7, 9;

Dentro do intervalo de 1 ate 100
mostre os primeiros10, porém multiplique-os por 10.0001 antes de imprimir
10.0001
20.0002
30.0003
40.0004
50.0005
60.0006
70.0007
80.0008
90.0009
100.001
mostre os ultimos 10, porém multiplique-os por 10.0001 antes de imprimir
910.009
920.009
930.009
940.009
950.01
960.01
970.01
980.01
990.01
1000.01

Quais caracteres temos entre A-z ? 
ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz

Quantos nao sao letras ? 
[\]^_`

Agora mostre somente as letras maiusculas:
ABCDEFGHIJKLMNOPQRSTUVWXYZ

Agora mostre somente as letras minusculas:
abcdefghijklmnopqrstuvwxyz
